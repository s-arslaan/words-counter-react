{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","useState","color","backgroundColor","myStyle","setmyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","mode","to","title","aboutText","toggleMode","role","htmlFor","TextForm","text","setText","heading","placeholder","value","onChange","event","target","rows","length","newText","toUpperCase","showAlert","toLowerCase","arr","split","forEach","word","index","slice","trim","navigator","clipboard","writeText","filter","element","Alert","alert","msg","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.44d47d30.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n\r\n  const [myStyle, setmyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.backgroundColor==='white') {\r\n        setmyStyle({\r\n            color: \"white\",\r\n            backgroundColor: \"black\"\r\n        })\r\n        setBtnText(\"Disable Dark Mode\")\r\n    } else {\r\n        setmyStyle({\r\n            color: \"black\",\r\n            backgroundColor: \"white\"\r\n        })\r\n        setBtnText(\"Enable Dark Mode\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1 className=\"my-2\">About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button className=\"btn btn-primary btn-sm my-3\" onClick={toggleStyle}>{btnText}</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toggleMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className={`form-check-label text-${props.mode==='dark'? 'light':'dark'}`} htmlFor=\"flexSwitchCheckDefault\">\r\n              Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// set props data types\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\n// set default props value (incase value is not passed)\r\nNavbar.defaultProps = {\r\n  title: \"Set title\",\r\n  aboutText: \"Set About Text\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpperClick = () => {\r\n    // console.log(\"uppercase clicked!\\nTEXT:: \" + text);\r\n    if (text.length>0) {\r\n      let newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Enter text first\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleLowerClick = () => {\r\n    if (text.length>0) {\r\n      \r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Enter text first\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleCapitalizeClick = () => {\r\n    if(text.length>0) {\r\n\r\n      let arr = text.split(\" \");\r\n      let newText = \"\";\r\n  \r\n      // if there is space at end of string, word[0] becomes undefined\r\n      arr.forEach((word, index) => {\r\n        // word[0] will be uppercase, rest alphabets will be lowercase, plus space\r\n        newText += word[0].toUpperCase() + word.slice(1).toLowerCase() + \" \";\r\n      });\r\n      setText(newText.trim());\r\n      props.showAlert(\"Capitalized every word\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Enter text first\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    if (text.length>0) {\r\n      // text.select();\r\n      // text.setSelectionRange(0, 99999); /* For mobile devices */\r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Copied to clipboard\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Enter text first\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* in style= '{'--first curly for JS '{' --second curly for OBJECT }} */}\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            placeholder=\"Enter text here..\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"9\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#282C34\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleUpperClick}\r\n        >\r\n          UPPER\r\n        </button>\r\n        <button\r\n          className=\"btn btn-success mx-2 my-1\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          lower\r\n        </button>\r\n        <button\r\n          className=\"btn btn-warning mx-2 my-1\"\r\n          onClick={handleCapitalizeClick}\r\n        >\r\n          <b>Capitalize</b>\r\n        </button>\r\n        <button\r\n          className=\"btn btn-secondary mx-2 my-1\"\r\n          onClick={handleCopyClick}\r\n        >\r\n          Copy\r\n        </button>\r\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n        <h2 className=\"my-3\">Your text Summary</h2>\r\n        <p>\r\n          {/* {text.length>0? text.split(\" \").length : '0'} words  */}\r\n          {\r\n            text\r\n              .trim()\r\n              .split(\" \")\r\n              .filter(function (element) {\r\n                return element !== \"\";\r\n              }).length\r\n          }{\" \"}\r\n          words &amp; {text.length} characters\r\n          <br />\r\n          {text\r\n            .trim()\r\n            .split(\" \")\r\n            .filter(function (element) {\r\n              return element !== \"\";\r\n            }).length * 0.008}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter your text to preview here...\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    //   props.alert if null then function wont return anything (as all JSX code will be converted to JS)\r\n    props.alert && (\r\n      <div>\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{props.alert.msg}</strong>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode is enabled\", \"success\");\n      // document.title = \"Word Counter - Dark\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark mode is disabled\", \"secondary\");\n      // document.title = \"Word Counter - Light\";\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"WordApp\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <div className=\"container my-3\">\n          <Alert alert={alert} />\n          <Routes>\n            {/* use \"exact\" to match exact path or else react will match partially */}\n            <Route exact path=\"/about\" element={<About mode={mode} />} />\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter text to analyze\" mode={mode} showAlert={showAlert} />} />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}